{
  "name": "yeti",
  "description": "Test your JavaScript with any browser.",
  "author": {
    "name": "Reid Burke",
    "email": "me@reidburke.com",
    "url": "http://reidburke.com"
  },
  "contributors": [
    {
      "name": "Dav Glass",
      "email": "davglass@gmail.com"
    }
  ],
  "keywords": [
    "YUI",
    "web app",
    "YUITest",
    "TDD",
    "BDD",
    "yui3",
    "test"
  ],
  "version": "0.2.10pre",
  "homepage": "htp://yuilibrary.com/projects/yeti",
  "repository": {
    "type": "git",
    "url": "git://github.com/yui/yeti.git"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://yuilibrary.com/license"
    }
  ],
  "bugs": {
    "url": "http://yuilibrary.com/projects/yeti/report"
  },
  "main": "lib/yeti",
  "bin": {
    "yeti": "./cli.js"
  },
  "scripts": {
    "test": "jake test --trace",
    "postinstall": "node scripts/postinstall.js"
  },
  "engines": {
    "node": "~0.6.4 || ~0.7.11 || ~0.8.0"
  },
  "dependencies": {
    "eventemitter2": "~0.4.8",
    "eventyoshi": "~0.1.2",
    "nopt": "~1.0.10",
    "onyx": "~0.1.2",
    "sockjs": "~0.3.1",
    "graceful-fs": "~1.1.2"
  },
  "devDependencies": {
    "semver": ">=1.0.14",
    "ronn": ">=0.3.8",
    "jshint": ">=0.6.1",
    "pact": ">=0.1.2",
    "phantom": ">=0.3.3",
    "vows": "https://github.com/reid/vows/tarball/extras",
    "selleck": ">=0.1.12",
    "yuidocjs": ">=0.2.39",
    "jake": ">=0.2.35",
    "rimraf": ">=2.0.1",
    "walk": ">=2.2.1"
  },
  "optionalDependencies": {},
  "readme": "# Yeti\n\n[![Build Status](https://secure.travis-ci.org/yui/yeti.png?branch=master)](http://travis-ci.org/yui/yeti)\n\nYeti is a command-line tool for launching JavaScript unit tests in a browser\nand reporting the results without leaving your terminal.\nYeti is designed to work with tests built on [YUI Test][yuitest] just as they are.\n\n## Install Yeti\n\nThe latest release can be installed easily:\n\n    npm install -g yeti\n\nYeti requires Node.js, which provides the `npm` command for installation.\nYou can [download Node.js](http://nodejs.org/download/) source or pre-built\ninstallers from their website.\n\n## Using Yeti\n\n### Running a test\n\nJust run Yeti with the HTML files containing your tests.\n\n    $ yeti test/*.html\n    Creating a Hub at http://localhost:9000\n    Waiting for agents to connect at http://localhost:9000.\n    When ready, press Enter to begin testing.\n\nPoint your browsers at that URL, then come back and press Enter.\n\n    [Open some browsers...]\n\n      Agent connected: Safari (6.0) / Mac OS\n      Agent connected: Chrome (22.0.1221.0) / Mac OS\n\n    [Come back, press Enter]\n\n    ✔ Testing started on Safari (6.0) / Mac OS, Chrome (22.0.1221.0) / Mac OS\n    Testing... / 86% complete (19/22) 121.99 tests/sec ✔ Agent completed: Safari (6.0) / Mac OS\n    Testing... | 95% complete (21/22) 115.40 tests/sec ✔ Agent completed: Chrome (22.0.1221.0) / Mac OS\n    Testing... \\ 100% complete (22/22) 115.23 tests/sec 504 tests passed! (9164ms)\n    $\n\nYeti exits automatically when all tests complete. If test failures occur, Yeti will exit with a non-zero status code.\n\n### Code coverage\n\nYeti automatically includes a line coverage summary if your tests were instrumented with [YUI Test Coverage][yuitest].\n\n    ✔ Testing started on Safari (6.0) / Mac OS\n    Testing... \\ 13% complete (10/60) 11.85 tests/sec 44% line coverage\n\n### Yeti Hub\n\nTo save time, start a Yeti Hub.\n\n    $ yeti --server\n    Yeti Hub listening on port 9000.\n\nPoint browsers at your local Yeti on port 9000. Now, you're ready to run tests without having to reconnect browsers each time.\n\nStarting Yeti in another terminal will connect to that Hub instead of starting a new one\nand will begin testing immediately if browsers are already connected.\n\n    $ yeti test/*.html\n    Connected to http://localhost:9000\n      Agent connected: Chrome (22.0.1221.0) / Mac OS\n      Agent connected: Safari (6.0) / Mac OS\n    ✔ Testing started on Chrome (22.0.1221.0) / Mac OS, Safari (6.0) / Mac OS\n    Testing... / 68% complete (15/22) 98.84 tests/sec ✔ Agent completed: Chrome (22.0.1221.0) / Mac OS\n    Testing... | 95% complete (21/22) 91.65 tests/sec ✔ Agent completed: Safari (6.0) / Mac OS\n    Testing... \\ 100% complete (22/22) 91.60 tests/sec 504 tests passed! (11529ms)\n    $\n\n### Sharing Your Yeti Hub\n\nYour Yeti Hub can be shared with other developers.\n\nFirst, I'll start a Hub on test.yeti.cx on port 80.\n\n    $ yeti --server --port 80\n\nGo ahead and point a few browsers there.\n\nNow, others can connect to it from their computer like so:\n\n    $ yeti --hub http://test.yeti.cx/ test/*.html\n    Connected to http://test.yeti.cx/\n    Waiting for agents to connect at http://test.yeti.cx/.\n    When ready, press Enter to begin testing.\n\nYour `pwd` and your test file will be served through the Hub. Like magic.\n\n    [Hit Enter]\n      Agent connected: Chrome (22.0.1221.0) / Mac OS\n      Agent connected: Safari (6.0) / Mac OS\n    ✔ Testing started on Chrome (22.0.1221.0) / Mac OS, Safari (6.0) / Mac OS\n    Testing... - 91% complete (20/22) 122.51 tests/sec ✔ Agent completed: Safari (6.0) / Mac OS\n    Testing... | 95% complete (21/22) 120.21 tests/sec ✔ Agent completed: Chrome (22.0.1221.0) / Mac OS\n    Testing... \\ 100% complete (22/22) 120.05 tests/sec 504 tests passed! (8763ms)\n\nThis makes it really simple to setup an ad-hoc testing lab shared with your team.\n\n### Timeouts\n\nYeti will disconnect a browser if it does not record any activity from it for 45 seconds.\nYou can adjust this interval with the `--timeout` option.\n\nThis will run Yeti with a 120 second timeout:\n\n    $ yeti --timeout 120 test.html\n\n### Query string parameters\n\nYou can specify query string parameters to add to your test URLs.\nThis can be used to pass information to your tests that control its behavior.\n\nThis will append `?fliter=coverage` to your tests, which is used by the tests\nfor the [YUI Library][YUI] to trigger loading instrumented code.\n\n    $ yeti --query 'filter=coverage' test/*.html\n\n### Error handling\n\nYeti will report an uncaught exceptions as Script Errors.\n\nYeti enforces [No-Quirks Mode][] in your tests because it may impact DOM-related APIs. [Add a DOCTYPE][doctype] to your test document to fix this.\n\n### Mobile testing made easy\n\nWhen combined with [localtunnel][], mobile testing is simple. If you're not dealing with sensitive information, startup your Yeti Hub and then run:\n\n    $ localtunnel 9000\n       Port 9000 is now publicly accessible from http://3z48.localtunnel.com ...\n\nYou can then visit that URL on your mobile (or any other) device and have it run new tests.\n\n### Yeti API\n\nYou can `require(\"yeti\")` inside your application to script Yeti for your own use.\n\nFor API documentation:\n\n - Run `make html` to build HTML documentation to `./build_docs`.\n - Review code comments inside `lib/yeti.js`, `lib/client.js` and `lib/hub/index.js`.\n\nYeti follows [Semantic Versioning](http://semver.org/) but is currently at a 0.x.y release. **The public API is not stable.** There will be changes.\n\n### Caveats\n\nYeti should work on all platforms supported by Node.js.\nIt's tested on Linux and OS X.\n\nYou must start Yeti's client in the directory you'll be serving tests from. For security reasons, Yeti will reject requests that try to access files outside of the directory you start Yeti in.\n\n## Install latest Yeti snapshot\n\nYou can install the latest in-development snapshot of Yeti easily, too:\n\n    npm install -g http://latest.yeti.cx\n\nThis will install Yeti as it exists on the [yui/yeti GitHub repository][github].\nYou can check the stability of the Yeti snapshot by checking [yui/yeti on Travis][travis].\n\n## Develop Yeti\n\nDo you want to add new features or fix bugs in Yeti itself? We made it easy for you to hack on Yeti.\n\n### Experimental: Develop on Windows\n\nAfter running `npm install`, replace the `make` commands below with\n`.\\jake.bat` to use the experimental Jake tasks that are Windows ready.\n\n### Install dependencies\n\nClone Yeti.\n\n    git clone https://github.com/yui/yeti.git\n    cd yeti\n\nInstall Yeti's dependencies.\n\n    npm install\n\n### Run tests & code coverage\n\nYeti's automated tests require PhantomJS.\nYou can [download PhantomJS](http://phantomjs.org/download.html) source or pre-built\nbinaries from their website. Make sure the `phantomjs` binary is installed in your PATH.\n\n    make test\n    make coverage\n\nThe latter command uses [JSCoverage for Node.js][jsc],\nwhich will be built and installed to `./tools/jscoverage`.\n\n### HTML documentation\n\n#### Website\n\nYeti uses [Selleck][] to generate its website. Selleck files are located in `doc/`.\n\n    make html\n\nDocumentation will be built to `build_docs/`.\n\n#### JavaScript API\n\nYeti uses [YUIDocJS][] to generate API documentation from inline JSDoc comment blocks.\n\n    make html-api\n\nDocumentation will be built to `build_docs/api/everything/`.\n\n### Linter\n\n    make lint\n\nYou may also run the linter on individual files with `./go lint`:\n\n    ./go lint test/blizzard.js\n\nYeti uses [JSHint][] to analyze code for problems. See `.jshintrc` for options used by Yeti.\n\n### Profiler\n\nRequires [Google Chrome Canary][canary] and OS X.\n\nProfile the Yeti Hub:\n\n    ./go profile --server\n\nUsing `./go profile` without `--server` to profile the Yeti client\nrequires an interactive terminal, which does not yet work.\n\n### Contribute to Yeti\n\nYour contributions are welcome!\nPlease review the [YUI contributor guide][CLA]\nbefore contributing.\n\nIf you haven't contributed to\na YUI project before,\nyou'll need to review and sign\nthe [YUI CLA][CLA]\nbefore we can accept your pull request.\n\n#### Contribution Checklist\n\n 1. Run `make lint` and make sure your new code runs through the linter without error.\n 1. Run `make coverage` and make sure your new code is covered with a test.\n    Tests are located in `test` and use [Vows][].\n\n## Bugs & Feedback\n\nOpen a ticket on [YUILibrary.com's Yeti Issue Tracker][issues] to report bugs or feature requests.\n\n## License\n\nYeti is free to use under YUI's BSD license.\nSee the LICENSE file or the [YUI license page](http://yuilibrary.com/license/)\nfor license text and copyright information.\n\n  [canary]: https://tools.google.com/dlpage/chromesxs\n  [github]: https://github.com/yui/yeti\n  [travis]: http://travis-ci.org/yui/yeti\n  [JSHint]: http://jshint.com/\n  [YUIDocJS]: https://github.com/davglass/yuidocjs\n  [Selleck]: http://github.com/rgrove/selleck\n  [jsc]: https://github.com/visionmedia/node-jscoverage\n  [localtunnel]: http://localtunnel.com/\n  [node]: http://nodejs.org/\n  [npm]: http://npmjs.org/\n  [issues]: http://yuilibrary.com/projects/yeti/newticket\n  [Vows]: http://vowsjs.org/\n  [CLA]: http://yuilibrary.com/contribute/cla/\n  [YUI]: http://yuilibrary.com/\n  [yuitest]: http://yuilibrary.com/yuitest/\n  [doctype]: http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#the-doctype\n  [No-Quirks Mode]: http://www.whatwg.org/specs/web-apps/current-work/multipage/dom.html#no-quirks-mode\n",
  "_id": "yeti@0.2.10pre",
  "dist": {
    "shasum": "6b8dccb3fd90ee4bab7e31e65410323224b5b183"
  },
  "_from": "http://latest.yeti.cx"
}
